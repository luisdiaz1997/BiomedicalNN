{"version":3,"sources":["components/Progress.js","components/FileUpload.js","App.js","serviceWorker.js","index.js"],"names":["Progress","percentage","className","role","style","width","FileUpload","useState","file","setFile","filename","setFilename","uploadPercentage","setUploadPercentage","image","setImage","config","onUploadProgress","progressEvent","parseInt","Math","round","loaded","total","setTimeout","type","id","aria-describedby","onChange","event","target","files","name","htmlFor","onClick","preventDefault","formData","FormData","append","axios","post","then","res","console","log","data","get","results","responseType","response","document","getElementById","URL","createObjectURL","src","alt","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"2RAqBeA,G,YAlBE,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,WAClB,OACE,yBAAKC,UAAU,YACb,yBACEA,UAAU,+CACVC,KAAK,cACLC,MAAO,CAAEC,MAAM,GAAD,OAAKJ,EAAL,OAEbA,EALH,QCoFSK,EApFI,WAAO,IAAD,EACGC,mBAAS,IADZ,mBACdC,EADc,KACRC,EADQ,OAEWF,mBAAS,eAFpB,mBAEdG,EAFc,KAEJC,EAFI,OAG2BJ,mBAAS,GAHpC,mBAGdK,EAHc,KAGIC,EAHJ,OAKKN,oBAAS,GALd,mBAKdO,EALc,KAKPC,EALO,KAmCfC,EAAS,CACXC,iBAAkB,SAAAC,GACdL,EACEM,SACEC,KAAKC,MAA8B,IAAvBH,EAAcI,OAAgBJ,EAAcK,SAM5DC,YAAW,kBAAMX,EAAoB,KAAI,OAIjD,OACI,yBAAKX,UAAU,WACX,yBAAKA,UAAU,eACX,yBAAKA,UAAU,eACX,2BACAuB,KAAK,OACLvB,UAAU,oBACVwB,GAAG,mBACHC,mBAAiB,wBACjBC,SAjDY,SAACC,GAEzBpB,EAAQoB,EAAMC,OAAOC,MAAM,IAC3BpB,EAAYkB,EAAMC,OAAOC,MAAM,GAAGC,SAgDtB,2BAAO9B,UAAU,oBAAoB+B,QAAQ,oBAC5CvB,GAID,kBAAC,EAAD,CAAUT,WAAYW,MAK9B,yBAAKV,UAAU,IACX,4BAAQA,UAAU,SAAUgC,QAxDf,SAACL,GACtBA,EAAMM,iBACN,IAAMC,EAAW,IAAIC,SACrBD,EAASE,OAAO,OAAQ9B,GACxB+B,IAAMC,KAAK,WAAYJ,EAASpB,GAC/ByB,MACG,SAAAC,GACIC,QAAQC,IAAIF,EAAIG,MAChBN,IAAMO,IAAN,iBAAoBJ,EAAIG,KAAKE,SAAW,CAACC,aAAc,SACtDP,MAAK,SAAAQ,GACYC,SAASC,eAAe,SACxCpC,EAASqC,IAAIC,gBAAgBJ,EAASJ,eA6CxC,WAKH/B,EAAQ,yBAAKwC,IAAKxC,EAAOyC,IAAI,uBAAwB,yC,MClEnDC,MAVf,WACE,OACE,yBAAKtD,UAAU,OACb,uDACD,kBAAC,EAAD,QCEeuD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFd,SAASC,eAAe,SDyHpB,kBAAmBc,WACrBA,UAAUC,cAAcC,MACrB1B,MAAK,SAAA2B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5B,QAAQ4B,MAAMA,EAAMC,c","file":"static/js/main.954e962d.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Progress = ({ percentage }) => {\n  return (\n    <div className='progress'>\n      <div\n        className='progress-bar progress-bar-striped bg-success'\n        role='progressbar'\n        style={{ width: `${percentage}%` }}\n      >\n        {percentage}%\n      </div>\n    </div>\n  );\n};\n\nProgress.propTypes = {\n  percentage: PropTypes.number.isRequired\n};\n\nexport default Progress;\n","import React, {useState } from 'react';\nimport axios from 'axios';\nimport './FileUpload.css'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Progress from './Progress';\n\nconst FileUpload = () => {\n    const [file, setFile] = useState('');\n    const [filename, setFilename] = useState('Choose File');\n    const [uploadPercentage, setUploadPercentage] = useState(0);\n\n    const [image, setImage] = useState(false)\n\n\n\n    const fileSelectedHandler = (event) =>{\n\n        setFile(event.target.files[0]);\n        setFilename(event.target.files[0].name);\n    }\n\n    const fileUploadHander = (event) =>{\n        event.preventDefault();\n        const formData = new FormData();\n        formData.append('file', file);\n        axios.post('/predict', formData,config)\n        .then(\n            res => {\n                console.log(res.data);\n                axios.get(`/image/${res.data.results}`, {responseType: 'blob'})\n                .then(response => {\n                  let imageNode = document.getElementById('image');\n                  setImage(URL.createObjectURL(response.data))\n                })\n\n            });\n\n\n\n    }\n\n    const config = {\n        onUploadProgress: progressEvent => {\n            setUploadPercentage(\n              parseInt(\n                Math.round((progressEvent.loaded * 100) / progressEvent.total)\n              )\n            );\n\n\n            // Clear percentage\n            setTimeout(() => setUploadPercentage(0), 10000);\n          }\n    }\n\n    return(\n        <div className=\"holding\">\n            <div className=\"file-upload\">\n                <div className=\"custom-file\">\n                    <input\n                    type=\"file\"\n                    className=\"custom-file-input\"\n                    id=\"inputGroupFile01\"\n                    aria-describedby=\"inputGroupFileAddon01\"\n                    onChange={fileSelectedHandler}\n                    />\n                    <label className=\"custom-file-label\" htmlFor=\"inputGroupFile01\">\n                    {filename}\n                    </label>\n\n\n                    <Progress percentage={uploadPercentage} />\n\n                </div>\n            </div>\n\n            <div className=\"\">\n                <button className=\"upload\"  onClick={fileUploadHander}>\n                    Upload\n                </button>\n            </div>\n\n            {image ? <img src={image} alt='Image not Rendered'/>: <p>no image</p>}\n            {/* {image ? <a href={image} download=\"image\"></a>: <p>no image</p>} */}\n\n        </div>\n\n    );\n};\n\nexport default FileUpload;\n","import React from 'react';\nimport FileUpload from './components/FileUpload.js';\nimport './App.css';\n\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Upload Image to Analyze</h1>\n     <FileUpload></FileUpload>\n    </div>\n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}