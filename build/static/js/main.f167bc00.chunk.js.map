{"version":3,"sources":["components/Progress.js","components/FileUpload.js","App.js","serviceWorker.js","index.js"],"names":["Progress","percentage","className","role","style","width","FileUpload","useState","file","setFile","filename","setFilename","uploadPercentage","setUploadPercentage","image","setImage","config","onUploadProgress","progressEvent","parseInt","Math","round","loaded","total","setTimeout","type","id","aria-describedby","onChange","event","target","files","name","htmlFor","onClick","preventDefault","formData","FormData","append","axios","post","then","res","console","log","data","results","src","alt","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"4RAqBeA,G,YAlBE,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,WAClB,OACE,yBAAKC,UAAU,YACb,yBACEA,UAAU,+CACVC,KAAK,cACLC,MAAO,CAAEC,MAAM,GAAD,OAAKJ,EAAL,OAEbA,EALH,QCgFSK,EAhFI,WAAO,IAAD,EACGC,mBAAS,IADZ,mBACdC,EADc,KACRC,EADQ,OAEWF,mBAAS,eAFpB,mBAEdG,EAFc,KAEJC,EAFI,OAG2BJ,mBAAS,GAHpC,mBAGdK,EAHc,KAGIC,EAHJ,OAKKN,oBAAS,GALd,mBAKdO,EALc,KAKPC,EALO,KA+BfC,EAAS,CACXC,iBAAkB,SAAAC,GACdL,EACEM,SACEC,KAAKC,MAA8B,IAAvBH,EAAcI,OAAgBJ,EAAcK,SAM5DC,YAAW,kBAAMX,EAAoB,KAAI,OAIjD,OACI,yBAAKX,UAAU,WACX,yBAAKA,UAAU,eACX,yBAAKA,UAAU,eACX,2BACAuB,KAAK,OACLvB,UAAU,oBACVwB,GAAG,mBACHC,mBAAiB,wBACjBC,SA7CY,SAACC,GAEzBpB,EAAQoB,EAAMC,OAAOC,MAAM,IAC3BpB,EAAYkB,EAAMC,OAAOC,MAAM,GAAGC,SA4CtB,2BAAO9B,UAAU,oBAAoB+B,QAAQ,oBAC5CvB,GAID,kBAAC,EAAD,CAAUT,WAAYW,MAK9B,yBAAKV,UAAU,IACX,4BAAQA,UAAU,SAAUgC,QApDf,SAACL,GACtBA,EAAMM,iBACN,IAAMC,EAAW,IAAIC,SACrBD,EAASE,OAAO,OAAQ9B,GACxB+B,IAAMC,KAAK,WAAYJ,EAASpB,GAC/ByB,MACG,SAAAC,GAEIC,QAAQC,IAAIF,EAAIG,MAIhB9B,EAAS,+BAAD,OAAgC2B,EAAIG,KAAKC,eAwCjD,WAKHhC,EAAQ,yBAAKiC,IAAKjC,EAAOkC,IAAI,uBAAwB,yC,MC9DnDC,MAVf,WACE,OACE,yBAAK/C,UAAU,OACb,uDACD,kBAAC,EAAD,QCEegD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvB,QAAQuB,MAAMA,EAAMC,c","file":"static/js/main.f167bc00.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Progress = ({ percentage }) => {\r\n  return (\r\n    <div className='progress'>\r\n      <div\r\n        className='progress-bar progress-bar-striped bg-success'\r\n        role='progressbar'\r\n        style={{ width: `${percentage}%` }}\r\n      >\r\n        {percentage}%\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nProgress.propTypes = {\r\n  percentage: PropTypes.number.isRequired\r\n};\r\n\r\nexport default Progress;\r\n","import React, {useState } from 'react';\r\nimport axios from 'axios';\r\nimport './FileUpload.css'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Progress from './Progress';\r\n\r\nconst FileUpload = () => {\r\n    const [file, setFile] = useState('');\r\n    const [filename, setFilename] = useState('Choose File');\r\n    const [uploadPercentage, setUploadPercentage] = useState(0);\r\n\r\n    const [image, setImage] = useState(false)\r\n\r\n\r\n    \r\n    const fileSelectedHandler = (event) =>{\r\n        \r\n        setFile(event.target.files[0]);\r\n        setFilename(event.target.files[0].name);\r\n    }\r\n\r\n    const fileUploadHander = (event) =>{\r\n        event.preventDefault();\r\n        const formData = new FormData();\r\n        formData.append('file', file);\r\n        axios.post('/predict', formData,config)\r\n        .then(\r\n            res => {\r\n\r\n                console.log(res.data);\r\n\r\n\r\n            \r\n                setImage(`http://localhost:5000/image/${res.data.results}`)\r\n            });\r\n    }\r\n\r\n    const config = {\r\n        onUploadProgress: progressEvent => {\r\n            setUploadPercentage(\r\n              parseInt(\r\n                Math.round((progressEvent.loaded * 100) / progressEvent.total)\r\n              )\r\n            );\r\n           \r\n  \r\n            // Clear percentage\r\n            setTimeout(() => setUploadPercentage(0), 10000);\r\n          }\r\n    }\r\n\r\n    return(\r\n        <div className=\"holding\">\r\n            <div className=\"file-upload\">\r\n                <div className=\"custom-file\">\r\n                    <input \r\n                    type=\"file\"\r\n                    className=\"custom-file-input\"\r\n                    id=\"inputGroupFile01\"\r\n                    aria-describedby=\"inputGroupFileAddon01\"\r\n                    onChange={fileSelectedHandler}\r\n                    />\r\n                    <label className=\"custom-file-label\" htmlFor=\"inputGroupFile01\">\r\n                    {filename}\r\n                    </label>\r\n\r\n                    \r\n                    <Progress percentage={uploadPercentage} />\r\n\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"\">\r\n                <button className=\"upload\"  onClick={fileUploadHander}>\r\n                    Upload\r\n                </button>\r\n            </div>\r\n\r\n            {image ? <img src={image} alt='Image not Rendered'/>: <p>no image</p>}\r\n            {/* {image ? <a href={image} download=\"image\"></a>: <p>no image</p>} */}\r\n\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\nexport default FileUpload;","import React from 'react';\r\nimport FileUpload from './components/FileUpload.js';\r\nimport './App.css';\r\n\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Upload Image to Analyze</h1>\r\n     <FileUpload></FileUpload>\r\n    </div>\r\n    \r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}